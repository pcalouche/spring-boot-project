<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.6.RELEASE</version><!-- July 2017 -->
    </parent>

    <groupId>com.pcalouche</groupId>
    <artifactId>spring-boot-project</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>Spring Boot Project Common POM</name>

    <properties>
        <!-- Misc Properties -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- Application Dependency Versions -->
        <postgresql.version>42.1.4</postgresql.version> <!-- August 2017 -->
        <thymeleaf.version>3.0.7.RELEASE</thymeleaf.version> <!-- July 2017 -->
        <!-- Test Dependency Versions -->
        <!-- Plugin Versions -->
        <maven.exec.version>1.6.0</maven.exec.version> <!--March 2017-->
        <maven.compiler.version>3.6.1</maven.compiler.version><!-- January 2017 -->
        <maven.war.version>3.1.0</maven.war.version><!-- April 2017 -->
        <maven.surefire.version>2.20</maven.surefire.version> <!-- April 2017 -->
        <maven.failsafe.version>2.20</maven.failsafe.version> <!-- April 2017 -->
    </properties>

    <!--
        Anything in dependency management will NOT be automatically by a child POM.  The child POM should NOT include the version
        if it chooses to include one of these dependencies.  The version in this POM is the recommended version and that is the
        version the child POM receives by importing one of these dependencies.  However, if child POM needs to use an alternative
        version for a good technical reason then the child POM can override the version.
    -->
    <dependencyManagement>
        <dependencies>
            <!-- Application Dependencies -->
            <!-- Test Dependencies -->
            <!-- Provided Dependencies -->
            <!-- Runtime and Optional Dependencies -->
            <!-- PostgreSQL JDBC Driver -->
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql.version}</version>
                <scope>runtime</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
        Anything in dependencies will be automatically imported by a POM that imports this POM as a dependency.  No additional
        references to these dependencies is required by the child POM. However, if the child POM needs to use an alternative
        version for a good technical reason then the child POM can override the version.
    -->
    <dependencies>
        <!-- Application Dependency Versions -->
        <!-- Test Dependencies -->
        <!-- Provided Dependencies -->
        <!-- Runtime and Optional Dependencies -->
    </dependencies>

    <build>
        <finalName>spring-boot-project</finalName>
        <!--
            Anything in plugin management will NOT be automatically imported by a POM that imports this POM as a plugin.
            The child POM should NOT include the version if it chooses to import one of these dependencies.  The child POM will
            need to supply the configuration for the plugin.  The version in this POM is the recommended version is the
            recommended version and that is what the POM doing the import will receive. However, if the POM doing the import
            needs to use an alternative version for a good technical reason the it can be  overridden in the POM doing the import.
        -->
        <pluginManagement>
            <plugins>
                <!-- Maven Exec Plugin -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${maven.exec.version}</version>
                </plugin>
                <!-- Maven Compiler Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>
                <!-- Maven WAR Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven.war.version}</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <!-- Maven Surefire Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.version}</version>
                </plugin>
                <!-- Maven Failsafe Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>