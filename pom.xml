<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.9.RELEASE</version> <!--November 2017-->
    </parent>

    <groupId>com.pcalouche</groupId>
    <artifactId>spring-boot-project-pom</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>Spring Boot Project Common POM</name>

    <developers>
        <developer>
            <name>Philip Calouche</name>
            <email>philip.calouche@outlook.com</email>
        </developer>
    </developers>

    <properties>
        <!--Recommended Properties Below-->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--Recommended Application Dependency Versions Below-->
        <spring-boot.version>1.5.9.RELEASE</spring-boot.version>  <!--November 2017-->
        <commons-lang3.version>3.7</commons-lang3.version> <!--November 2017-->
        <jjwt.version>0.9.0</jjwt.version>
        <!--Recommended Provided, Runtime, and Optional Dependencies Below-->
        <postgresql.version>42.1.4</postgresql.version> <!--August 2017-->
        <!--Recommended Test Dependency Versions-->
        <selenium.version>3.7.1</selenium.version> <!--November 2017-->
        <cucumber.version>1.2.5</cucumber.version> <!--September 2016-->
        <!--Recommended Plugin Versions-->
        <!--
           Before adding a plugin version here check in the spring boot spring-boot-dependencies POM which is two parent POMs up to see if it already exists
           Parent POMs can be viewed by hitting F4 on the parent POM reference in the pom.xml file.  Follow the naming convention in there to override
           the version versus creating a new property.  It has been shown that some of the Maven plugins are pretty old in the Spring Boot parent POM
           and their newer versions work better.
        -->
        <maven-jar-plugin.version>3.0.2</maven-jar-plugin.version> <!--June 2016-->
        <maven-war-plugin.version>3.2.0</maven-war-plugin.version> <!--September 2017-->
        <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version> <!--March 2017-->
    </properties>

    <!--
      Anything in dependency management will NOT be automatically by a child POM.  The child POM should NOT include the version
      if it chooses to include one of these dependencies.  The version in this POM is the recommended version and that is the
      version the child POM receives by importing one of these dependencies.  However, if child POM needs to use an alternative
      version for a good technical reason then the child POM can override the version.
   -->
    <dependencyManagement>
        <dependencies>
            <!--Recommended Application Dependencies Below-->
            <!--Apache Commons Lang for helpful utility methods not included in core Java-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <!--JSON Web Token Support for the JVM-->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jjwt.version}</version>
            </dependency>
            <!--Recommended Test Dependencies Below-->
            <!--Selenium for WebDriver for Web Browser Automation-->
            <dependency>
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-java</artifactId>
                <version>${selenium.version}</version>
            </dependency>
            <!--Cucumber JUnit for Cucumber Tests-->
            <dependency>
                <groupId>info.cukes</groupId>
                <artifactId>cucumber-junit</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <!--Cucumber Spring for Spring support in Cucumber-->
            <dependency>
                <groupId>info.cukes</groupId>
                <artifactId>cucumber-spring</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <!--Recommended Provided, Runtime, and Optional Dependencies Below-->
            <!--PostgreSQL JDBC Driver-->
        </dependencies>
    </dependencyManagement>

    <build>
        <!--
           This just sets the versions of plugins to use.  The child POM will need to supply any additional configuration for the plugin.

           Plugins already managed in the spring-boot-dependencies parent POM do NOT need to be included here.  Only their version property
           needs to be overridden in the the properties section of this POM.

           The version in this POM is the recommended version is the recommended version and that is what the POM doing the import will receive.
           However, if the POM doing the import needs to use an alternative version for a good technical reason the it can be overridden in the
           POM doing the import.
         -->
    </build>
</project>